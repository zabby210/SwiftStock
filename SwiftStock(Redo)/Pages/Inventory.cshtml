@page
@model SwiftStock.Pages.InventoryItemModel
@{
    ViewData["Title"] = "Inventory Management";
    Layout = "_AdminLayout";
}

<div class="space-y-6">
    <div class="h-full overflow-hidden">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <div>
                <h1 class="text-3xl font-bold text-white">Inventory Management</h1>
                <p class="text-slate-400 mt-1">Manage your products and stock levels</p>
            </div>
            <div class="flex space-x-4">
                <button onclick="openAddModal()" 
                        class="px-4 py-2 bg-[#E31837] text-white rounded-lg hover:bg-[#E31837]/90 transition-colors duration-300 flex items-center">
                    <i class="material-icons mr-2">add</i>
                    Add Product
                </button>
                <button onclick="exportInventory()" 
                        class="px-4 py-2 bg-[#003C7E] text-white rounded-lg hover:bg-[#003C7E]/90 transition-colors duration-300 flex items-center">
                    <i class="material-icons mr-2">download</i>
                    Export
                </button>
            </div>
        </div>
    
        <!-- Search and Filter -->
        <div class="glass-card p-4 rounded-xl mb-6">
            <div class="flex flex-wrap gap-4">
                <div class="flex-1">
                    <div class="relative">
                        <i class="material-icons absolute left-4 top-3 text-slate-400">search</i>
                        <input type="text" 
                               id="search-input"
                               placeholder="Search products..."
                               class="w-full pl-12 pr-4 py-3 bg-[#0f1117] border border-slate-800 rounded-lg focus:border-[#E31837] focus:ring-1 focus:ring-[#E31837] text-white">
                    </div>
                </div>
                <div class="flex gap-4">
                    <select id="sort-by" class="px-4 py-3 bg-[#0f1117] border border-slate-800 rounded-lg text-white focus:border-[#E31837] focus:ring-1 focus:ring-[#E31837]">
                        <option value="name">Sort by Name</option>
                        <option value="stock">Sort by Stock</option>
                        <option value="price">Sort by Price</option>
                    </select>
                    <button onclick="refreshTable()" 
                            class="px-4 py-2 bg-slate-800 text-white rounded-lg hover:bg-slate-700 transition-colors duration-300 flex items-center">
                        <i class="material-icons">refresh</i>
                    </button>
                </div>
            </div>
        </div>
    
        <!-- Inventory Table -->
        <div class="glass-card rounded-xl overflow-hidden" style="height: calc(100vh - 280px);">
            <div class="h-full overflow-y-auto scrollbar-thin scrollbar-thumb-[#161922] scrollbar-track-[#0f1117] hover:scrollbar-thumb-[#E31837]">
                <table class="w-full">
                <thead>
                        <tr class="text-left bg-[#0f1117]">
                            <th class="px-6 py-4 text-sm font-semibold text-slate-400">ID</th>
                            <th class="px-6 py-4 text-sm font-semibold text-slate-400">Product Name</th>
                            <th class="px-6 py-4 text-sm font-semibold text-slate-400">Price</th>
                            <th class="px-6 py-4 text-sm font-semibold text-slate-400">Stock</th>
                            <th class="px-6 py-4 text-sm font-semibold text-slate-400">Actions</th>
                    </tr>
                </thead>
                    <tbody class="divide-y divide-slate-800">
                    @foreach (var item in Model.InventoryItem)
                    {
                            <tr class="hover:bg-[#0f1117]/50">
                                <td class="px-6 py-4 text-white">#@item.Id</td>
                                <td class="px-6 py-4 text-white">@item.Product_Name</td>
                                <td class="px-6 py-4 text-white">₱@item.Price.ToString("N2")</td>
                                <td class="px-6 py-4">
                                    <span class="px-3 py-1 rounded-full text-xs font-medium 
                                        @(item.Stock > 50 ? "bg-green-500/10 text-green-500" : 
                                          item.Stock > 0 ? "bg-yellow-500/10 text-yellow-500" : 
                                          "bg-red-500/10 text-red-500")">
                                        @item.Stock items
                                    </span>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex space-x-3">
                                        <button type="button"
                                                onclick='openEditModal({"id": @item.Id, "product_Name": "@item.Product_Name", "price": @item.Price, "stock": @item.Stock})'
                                                class="text-blue-500 hover:text-blue-400">
                                            <i class="material-icons">edit</i>
                                        </button>
                                        <button onclick="deleteProduct(@item.Id)" class="text-red-500 hover:text-red-400">
                                            <i class="material-icons">delete</i>
                                        </button>
                                    </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to handle sorting
    document.getElementById('sort-by').addEventListener('change', function() {
        const sortBy = this.value;
        const tbody = document.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        rows.sort((a, b) => {
            let aValue, bValue;
            
            switch(sortBy) {
                case 'name':
                    aValue = a.children[1].textContent;
                    bValue = b.children[1].textContent;
                    return aValue.localeCompare(bValue);
                
                case 'stock':
                    aValue = parseInt(a.children[3].textContent);
                    bValue = parseInt(b.children[3].textContent);
                    return aValue - bValue;
                
                case 'price':
                    aValue = parseFloat(a.children[2].textContent.replace('₱', '').replace(',', ''));
                    bValue = parseFloat(b.children[2].textContent.replace('₱', '').replace(',', ''));
                    return aValue - bValue;
                
                default:
                    aValue = parseInt(a.children[0].textContent.replace('#', ''));
                    bValue = parseInt(b.children[0].textContent.replace('#', ''));
                    return aValue - bValue;
            }
        });

        // Clear and re-append sorted rows
        rows.forEach(row => tbody.appendChild(row));
    });

    // Function to handle search
    document.getElementById('search-input').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const productName = row.children[1].textContent.toLowerCase();
            row.style.display = productName.includes(searchTerm) ? '' : 'none';
        });
    });
</script>

<!-- Add/Edit Product Modal -->
<div id="product-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center">
    <div class="glass-card rounded-xl p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold text-white mb-6" id="modal-title">Add Product</h3>
        
        <form id="product-form" class="space-y-4">
            @Html.AntiForgeryToken()
            <input type="hidden" id="product-id">
            
            <div>
                <label for="product-name" class="block text-sm font-medium text-slate-400 mb-2">Product Name</label>
                <input type="text" 
                       id="product-name" 
                       required
                       class="w-full px-4 py-3 bg-[#0f1117] border border-slate-800 rounded-lg text-white focus:border-[#E31837] focus:ring-1 focus:ring-[#E31837]">
            </div>
            
            <div>
                <label for="product-price" class="block text-sm font-medium text-slate-400 mb-2">Price</label>
                <input type="number" 
                       id="product-price" 
                       required
                       min="0"
                       step="0.01"
                       class="w-full px-4 py-3 bg-[#0f1117] border border-slate-800 rounded-lg text-white focus:border-[#E31837] focus:ring-1 focus:ring-[#E31837]">
            </div>
            
            <div>
                <label for="product-stock" class="block text-sm font-medium text-slate-400 mb-2">Stock</label>
                <input type="number" 
                       id="product-stock" 
                       required
                       min="0"
                       class="w-full px-4 py-3 bg-[#0f1117] border border-slate-800 rounded-lg text-white focus:border-[#E31837] focus:ring-1 focus:ring-[#E31837]">
            </div>

            <div class="flex space-x-4 mt-6">
                <button type="button" 
                        onclick="closeModal()" 
                        class="flex-1 px-4 py-2 rounded-lg border border-slate-800 text-slate-400 hover:bg-slate-800 transition-colors duration-300">
                    Cancel
                </button>
                <button type="submit" 
                        class="flex-1 px-4 py-2 rounded-lg bg-[#E31837] text-white hover:bg-[#E31837]/90 transition-colors duration-300">
                    Save
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-confirmation-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center">
    <div class="glass-card rounded-xl p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold text-white mb-4">Confirm Deletion</h3>
        <p class="text-slate-400 mb-6">Are you sure you want to delete this product? This action cannot be undone.</p>
        <div class="flex space-x-4">
            <button type="button" onclick="closeDeleteConfirmation()" class="flex-1 px-4 py-2 rounded-lg border border-slate-800 text-slate-400 hover:bg-slate-800 transition-colors duration-300">
                Cancel
            </button>
            <button id="confirm-delete-button" type="button" class="flex-1 px-4 py-2 rounded-lg bg-[#E31837] text-white hover:bg-[#E31837]/90 transition-colors duration-300">
                Delete
            </button>
        </div>
    </div>
</div>

@section Scripts {
<script>
let refreshInterval = null;
let isEditing = false;
let isProcessing = false;
let productIdToDelete = null; // Variable to store the ID of the product to delete

function openAddModal() {
    isEditing = false;
    document.getElementById('modal-title').textContent = 'Add Product';
    document.getElementById('product-form').reset();
    document.getElementById('product-id').value = '';
    showModal();
}

function openEditModal(product) {
    if (!product) {
        console.error('No product data provided to openEditModal');
        return;
    }
    
    try {
        isEditing = true;
        stopAutoRefresh(); // Stop refresh when opening modal
        
        document.getElementById('modal-title').textContent = 'Edit Product';
        document.getElementById('product-id').value = product.id;
        document.getElementById('product-name').value = product.product_Name;
        document.getElementById('product-price').value = product.price;
        document.getElementById('product-stock').value = product.stock;
        
        const modal = document.getElementById('product-modal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        console.log('Edit modal opened for product:', product);
    } catch (error) {
        console.error('Error opening edit modal:', error);
        showNotification('Error opening edit form', 'error');
    }
}

function showModal() {
    const modal = document.getElementById('product-modal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    stopAutoRefresh();
    console.log('Modal opened, auto-refresh stopped');
}

function closeModal() {
    const modal = document.getElementById('product-modal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.getElementById('product-form').reset();
    startAutoRefresh();
    console.log('Modal closed, auto-refresh started');
}

// Improve the refreshTable function
async function refreshTable() {
    try {
        const searchTerm = document.getElementById('search-input').value || '';
        const sortBy = document.getElementById('sort-by').value || 'name';
        
        console.log('Refreshing table with search:', searchTerm, 'sort:', sortBy);
        
        const response = await fetch(`/api/Inventory?search=${encodeURIComponent(searchTerm)}&sort=${encodeURIComponent(sortBy)}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache'
            },
            cache: 'no-store'
        });
        
        if (!response.ok) {
            throw new Error(`Failed to fetch inventory data: ${response.status} ${response.statusText}`);
        }
        
        const products = await response.json();
        console.log(`Fetched ${products.length} products`);
        
        const tbody = document.querySelector('tbody');
        if (!tbody) {
            throw new Error('Table body not found');
        }

        tbody.innerHTML = products.map(item => `
            <tr class="hover:bg-[#0f1117]/50">
                <td class="px-6 py-4 text-white">#${item.id}</td>
                <td class="px-6 py-4 text-white">${escapeHtml(item.product_Name)}</td>
                <td class="px-6 py-4 text-white">₱${parseFloat(item.price).toFixed(2)}</td>
                <td class="px-6 py-4">
                    <span class="px-3 py-1 rounded-full text-xs font-medium 
                        ${item.stock > 10 ? "bg-green-500/10 text-green-500" : 
                          item.stock > 0 ? "bg-yellow-500/10 text-yellow-500" : 
                          "bg-red-500/10 text-red-500"}">
                        ${item.stock} items
                    </span>
                </td>
                <td class="px-6 py-4">
                    <div class="flex space-x-3">
                        <button type="button"
                                onclick='openEditModal(${JSON.stringify({
                                    id: item.id,
                                    product_Name: item.product_Name,
                                    price: item.price,
                                    stock: item.stock
                                }).replace(/'/g, "\\'")})'
                                class="text-blue-500 hover:text-blue-400">
                            <i class="material-icons">edit</i>
                        </button>
                        <button onclick="deleteProduct(${item.id})" 
                                class="text-red-500 hover:text-red-400">
                            <i class="material-icons">delete</i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
        
        console.log('Table refresh completed');
        return true;
    } catch (error) {
        console.error('Error refreshing table:', error);
        showNotification('Error refreshing table: ' + error.message, 'error');
        return false;
    }
}

// Create a better form submission handler
document.getElementById('product-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (isProcessing) {
        console.log('Already processing a request, ignoring');
        return;
    }
    
    isProcessing = true;
    const submitButton = e.target.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    
    try {
        const productData = {
            id: isEditing ? parseInt(document.getElementById('product-id').value) : 0,
            product_Name: document.getElementById('product-name').value.trim(),
            price: parseFloat(document.getElementById('product-price').value),
            stock: parseInt(document.getElementById('product-stock').value)
        };

        console.log('Submitting product data:', productData);

        const url = isEditing ? '/api/Inventory/update' : '/api/Inventory/add';
        const method = isEditing ? 'PUT' : 'POST';
        
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        // Stop auto-refresh while we're performing an update
        stopAutoRefresh();
        
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token,
                'Accept': 'application/json'
            },
            body: JSON.stringify(productData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText || 'Failed to save product');
        }

        // Get the response data
        const responseData = await response.json();
        console.log('Saved product response:', responseData);
        
        // Close modal
        const modal = document.getElementById('product-modal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        
        // Reset form
        document.getElementById('product-form').reset();
        
        // Force immediate refresh of table data
        const refreshSuccess = await refreshTable();
        
        // Show success message after refresh
        showNotification(isEditing ? 'Product updated successfully' : 'Product added successfully', 'success');
        
        // Start auto-refresh again after a short delay
        setTimeout(() => {
            startAutoRefresh();
        }, 1000);
        
    } catch (error) {
        console.error('Error saving product:', error);
        showNotification(error.message, 'error');
        
        // Restart auto-refresh even if there was an error
        startAutoRefresh();
    } finally {
        submitButton.disabled = false;
        isProcessing = false;
        isEditing = false; // Reset editing state
    }
});

// Improved auto-refresh functions
function startAutoRefresh() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
    }
    
    refreshInterval = setInterval(async () => {
        const modal = document.getElementById('product-modal');
        const isModalOpen = modal.classList.contains('flex');
        
        if (!isModalOpen && !isProcessing) {
            console.log('Auto-refreshing table...');
            await refreshTable();
        } else {
            console.log('Skipping auto-refresh: modal open or processing');
        }
    }, 5000);
    
    console.log('Auto-refresh started');
}

function stopAutoRefresh() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
        console.log('Auto-refresh stopped');
    }
}

// Improved initialization code
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('Initializing inventory page...');
        
        // Initial table load
        const initialLoadSuccess = await refreshTable();
        
        if (initialLoadSuccess) {
            // Start auto-refresh
            startAutoRefresh();
            
            // Setup search with debounce
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(async () => {
                    // Stop auto-refresh temporarily when searching
                    stopAutoRefresh();
                    await refreshTable();
                    // Restart auto-refresh after search is done
                    startAutoRefresh();
                }, 300));
            }
            
            // Setup sort
            const sortSelect = document.getElementById('sort-by');
            if (sortSelect) {
                sortSelect.addEventListener('change', async () => {
                    // Stop auto-refresh temporarily when sorting
                    stopAutoRefresh();
                    await refreshTable();
                    // Restart auto-refresh after sorting is done
                    startAutoRefresh();
                });
            }
            
            console.log('Initialization complete');
        }
    } catch (error) {
        console.error('Initialization error:', error);
        showNotification('Error initializing page. Please refresh.', 'error');
    }
});

// Improved delete function
async function deleteProduct(id) {
    productIdToDelete = id; // Store the ID of the product to delete
    const modal = document.getElementById('delete-confirmation-modal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
}

function closeDeleteConfirmation() {
    const modal = document.getElementById('delete-confirmation-modal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    productIdToDelete = null; // Reset the product ID
}

// Confirm deletion when the delete button in the modal is clicked
document.getElementById('confirm-delete-button').addEventListener('click', async () => {
    if (productIdToDelete !== null) {
        await performDelete(productIdToDelete);
        closeDeleteConfirmation(); // Close the modal after deletion
    }
});

// Function to perform the actual deletion
async function performDelete(id) {
    if (isProcessing) {
        showNotification('Another operation is in progress. Please wait.', 'error');
        return;
    }
    
    isProcessing = true;
    
    try {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const response = await fetch(`/api/Inventory/${id}`, {
            method: 'DELETE',
            headers: {
                'RequestVerificationToken': token,
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText || 'Failed to delete product');
        }
        
        // Refresh the table
        await refreshTable();
        
        // Show success message
        showNotification('Product deleted successfully', 'success');
    } catch (error) {
        console.error('Delete error:', error);
        showNotification(error.message, 'error');
    } finally {
        isProcessing = false;
        productIdToDelete = null; // Reset the product ID
    }
}

// Keep your existing utility functions
function showNotification(message, type) {
    const notificationDiv = document.createElement('div');
    notificationDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    } text-white z-50`;
    notificationDiv.textContent = message;
    
    document.body.appendChild(notificationDiv);
    
    setTimeout(() => {
        notificationDiv.remove();
    }, 3000);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function exportInventory() {
    try {
        window.location.href = '/api/inventory/export';
    } catch (error) {
        showNotification('Error exporting inventory: ' + error.message, 'error');
    }
}

// Add this new utility function
function handleApiError(error) {
    console.error('API Error:', error);
    let message = 'An error occurred';
    
    if (error.response) {
        // Server responded with error
        message = error.response.data || 'Server error occurred';
    } else if (error.request) {
        // Request made but no response
        message = 'No response from server';
    } else {
        // Other errors
        message = error.message || 'Unknown error occurred';
    }
    
    showNotification(message, 'error');
}
</script>
}
