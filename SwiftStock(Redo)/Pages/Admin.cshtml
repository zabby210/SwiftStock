@page
@using SwiftStock.Pages
@model SwiftStock.Pages.AdminModel
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "_AdminLayout";
}

<div class="h-[calc(100vh-4rem)] overflow-hidden space-y-4 p-4">
    <!-- Welcome Section -->
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-white">Welcome back, Admin</h1>
            <p class="text-slate-400 text-sm">Here's what's happening with your store today.</p>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-500/10 border border-red-500/20 text-red-500 p-3 rounded-lg text-sm">
            <i class="fas fa-exclamation-circle mr-2"></i>
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
        <!-- Total Sales -->
        <div class="dashboard-card glass-card p-4 rounded-lg">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-slate-400 text-xs">Total Sales</p>
                    <h3 class="text-xl font-bold text-white mt-1">₱@Model.TotalSales.ToString("N2")</h3>
                    <p class="text-green-500 text-xs mt-1">
                        <i class="fas fa-arrow-up mr-1"></i>
                        Today's sales
                    </p>
                </div>
                <div class="w-10 h-10 rounded-full bg-[#E31837]/10 flex items-center justify-center">
                    <i class="material-icons text-[#E31837] text-lg">payments</i>
                </div>
            </div>
        </div>

        <!-- Total Transactions -->
        <div class="dashboard-card glass-card p-4 rounded-lg">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-slate-400 text-xs">Total Transactions</p>
                    <h3 class="text-xl font-bold text-white mt-1">@Model.TotalTransactions</h3>
                    <p class="text-green-500 text-xs mt-1">
                        <i class="fas fa-arrow-up mr-1"></i>
                        Today's transactions
                    </p>
                </div>
                <div class="w-10 h-10 rounded-full bg-[#003C7E]/10 flex items-center justify-center">
                    <i class="material-icons text-[#003C7E] text-lg">receipt_long</i>
                </div>
            </div>
        </div>

        <!-- Average Transaction Value -->
        <div class="dashboard-card glass-card p-4 rounded-lg">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-slate-400 text-xs">Average Transaction</p>
                    <h3 class="text-xl font-bold text-white mt-1">₱@Model.AverageTransaction.ToString("N2")</h3>
                    <p class="text-green-500 text-xs mt-1">
                        <i class="fas fa-arrow-up mr-1"></i>
                        Per transaction
                    </p>
                </div>
                <div class="w-10 h-10 rounded-full bg-[#FFD700]/10 flex items-center justify-center">
                    <i class="material-icons text-[#FFD700] text-lg">trending_up</i>
                </div>
            </div>
        </div>

        <!-- Top Selling Product -->
        <div class="dashboard-card glass-card p-4 rounded-lg">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-slate-400 text-xs">Top Selling Product</p>
                    <h3 class="text-xl font-bold text-white mt-1">@Model.TopSellingProduct</h3>
                    <p class="text-green-500 text-xs mt-1">
                        <i class="fas fa-arrow-up mr-1"></i>
                        @Model.TopSellingQuantity sold
                    </p>
                </div>
                <div class="w-10 h-10 rounded-full bg-red-500/10 flex items-center justify-center">
                    <i class="material-icons text-red-500 text-lg">star</i>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-3">
        <!-- Product Sales Chart -->
        <div class="glass-card p-3 rounded-lg">
            <div class="flex items-center justify-between mb-2">
                <h3 class="text-sm font-semibold text-white">Product Sales Distribution</h3>
                <select id="productSalesPeriod" class="bg-[#0f1117] border border-slate-800 rounded-lg px-2 py-1 text-xs">
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="annually">Annually</option>
                </select>
            </div>
            <div style="height: 300px;">
                <canvas id="productSalesChart"></canvas>
            </div>
        </div>

        <!-- Revenue Chart -->
        <div class="glass-card p-3 rounded-lg">
            <div class="flex items-center justify-between mb-2">
                <h3 class="text-sm font-semibold text-white">Revenue Overview</h3>
                <select id="revenuePeriod" class="bg-[#0f1117] border border-slate-800 rounded-lg px-2 py-1 text-xs">
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="annually">Annually</option>
                </select>
            </div>
            <div style="height: 300px;">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Recent Transactions Table -->
    <div class="glass-card rounded-lg overflow-hidden h-[calc(100vh-42rem)] transition-all duration-300 ease-in-out" id="transactions-normal">
        <div class="p-2 border-b border-slate-800">
            <div class="flex items-center justify-between">
                <h3 class="text-sm font-semibold text-white">Recent Transactions</h3>
                <button onclick="toggleFullscreen()" class="text-[#E31837] hover:text-[#E31837]/80 text-xs">
                    <i class="fas fa-expand mr-1"></i> View Full Screen
                </button>
            </div>
        </div>
        <div class="overflow-y-auto h-full scrollbar-thin scrollbar-thumb-[#161922] scrollbar-track-[#0f1117] hover:scrollbar-thumb-[#E31837]">
            <table class="w-full">
                <thead class="sticky top-0 bg-[#161922] z-10">
                    <tr class="text-left">
                        <th class="px-3 py-1.5 text-xs font-semibold text-slate-400">Personnel ID</th>
                        <th class="px-3 py-1.5 text-xs font-semibold text-slate-400">Items</th>
                        <th class="px-3 py-1.5 text-xs font-semibold text-slate-400">Total</th>
                        <th class="px-3 py-1.5 text-xs font-semibold text-slate-400">Date</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-slate-800">
                    @foreach (var transaction in Model.RecentTransactions)
                    {
                        <tr class="hover:bg-[#0f1117]/50 transition-colors duration-150">
                            <td class="px-3 py-1.5 text-xs text-slate-300">@transaction.Personnel_ID</td>
                            <td class="px-3 py-1.5 text-xs text-slate-300">@transaction.TransactionItems.Count items</td>
                            <td class="px-3 py-1.5 text-xs text-slate-300">₱@transaction.Total.ToString("N2")</td>
                            <td class="px-3 py-1.5 text-xs text-slate-400">@transaction.Transaction_Date.ToString("MM/dd/yyyy HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Fullscreen Transactions Table -->
    <div class="fixed inset-0 bg-[#0f1117] z-50 hidden opacity-0 transition-all duration-300 ease-in-out transform translate-y-4" id="transactions-fullscreen">
        <div class="h-full flex flex-col">
            <div class="p-4 border-b border-slate-800 bg-[#161922]">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-semibold text-white">Recent Transactions</h3>
                    <button onclick="toggleFullscreen()" class="text-[#E31837] hover:text-[#E31837]/80 flex items-center">
                        <i class="fas fa-compress mr-2"></i> Back to Dashboard
                    </button>
                </div>
            </div>
            <div class="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-[#161922] scrollbar-track-[#0f1117] hover:scrollbar-thumb-[#E31837]">
                <table class="w-full">
                    <thead class="sticky top-0 bg-[#161922] z-10">
                        <tr class="text-left">
                            <th class="px-4 py-2 text-sm font-semibold text-slate-400">Personnel ID</th>
                            <th class="px-4 py-2 text-sm font-semibold text-slate-400">Items</th>
                            <th class="px-4 py-2 text-sm font-semibold text-slate-400">Total</th>
                            <th class="px-4 py-2 text-sm font-semibold text-slate-400">Date</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-slate-800">
                        @foreach (var transaction in Model.RecentTransactions)
                        {
                            <tr class="hover:bg-[#0f1117]/50 transition-colors duration-150">
                                <td class="px-4 py-2 text-sm text-slate-300">@transaction.Personnel_ID</td>
                                <td class="px-4 py-2 text-sm text-slate-300">@transaction.TransactionItems.Count items</td>
                                <td class="px-4 py-2 text-sm text-slate-300">₱@transaction.Total.ToString("N2")</td>
                                <td class="px-4 py-2 text-sm text-slate-400">@transaction.Transaction_Date.ToString("MM/dd/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Product Sales Chart
    const productSalesCtx = document.getElementById('productSalesChart').getContext('2d');
    let productSalesChart = new Chart(productSalesCtx, {
        type: 'pie',
        data: {
            labels: @Json.Serialize(Model.ProductSalesData.Labels),
            datasets: [{
                data: @Json.Serialize(Model.ProductSalesData.Values),
                backgroundColor: [
                    '#E31837',
                    '#003C7E',
                    '#FFD700',
                    '#4CAF50',
                    '#9C27B0',
                    '#FF9800',
                    '#2196F3'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        color: '#94a3b8',
                        font: {
                            size: 12
                        },
                        boxWidth: 15,
                        padding: 15
                    }
                }
            },
            layout: {
                padding: {
                    top: 20,
                    right: 20,
                    bottom: 20,
                    left: 20
                }
            }
        }
    });

    // Revenue Chart
    const revenueCtx = document.getElementById('revenueChart').getContext('2d');
    let revenueChart = new Chart(revenueCtx, {
        type: 'bar',
        data: {
            labels: @Json.Serialize(Model.RevenueData.Labels),
            datasets: [{
                label: 'Revenue',
                data: @Json.Serialize(Model.RevenueData.Values),
                backgroundColor: '#E31837'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    },
                    ticks: {
                        color: '#94a3b8',
                        font: {
                            size: 12
                        },
                        callback: function(value) {
                            return '₱' + value.toLocaleString();
                        },
                        maxTicksLimit: 6
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    },
                    ticks: {
                        color: '#94a3b8',
                        font: {
                            size: 12
                        },
                        maxRotation: 0
                    }
                }
            },
            layout: {
                padding: {
                    top: 20,
                    right: 20,
                    bottom: 20,
                    left: 20
                }
            }
        }
    });

    // Update charts when period changes
    document.getElementById('productSalesPeriod').addEventListener('change', function(e) {
        updateProductSalesChart(e.target.value);
    });

    document.getElementById('revenuePeriod').addEventListener('change', function(e) {
        updateRevenueChart(e.target.value);
    });

    function updateProductSalesChart(period) {
        fetch(`/api/Admin/ProductSales?period=${period}`)
            .then(response => response.json())
            .then(data => {
                productSalesChart.data.labels = data.labels;
                productSalesChart.data.datasets[0].data = data.values;
                productSalesChart.update();
            });
    }

    function updateRevenueChart(period) {
        fetch(`/api/Admin/Revenue?period=${period}`)
            .then(response => response.json())
            .then(data => {
                revenueChart.data.labels = data.labels;
                revenueChart.data.datasets[0].data = data.values;
                revenueChart.update();
            });
    }
</script>
}

<script>
    function toggleFullscreen() {
        const normalView = document.getElementById('transactions-normal');
        const fullscreenView = document.getElementById('transactions-fullscreen');
        
        if (normalView.classList.contains('hidden')) {
            // Switch back to normal view
            fullscreenView.classList.add('opacity-0', 'translate-y-4');
            setTimeout(() => {
                normalView.classList.remove('hidden');
                fullscreenView.classList.add('hidden');
            }, 300);
        } else {
            // Switch to fullscreen view
            normalView.classList.add('hidden');
            fullscreenView.classList.remove('hidden');
            // Force a reflow to ensure the transition works
            fullscreenView.offsetHeight;
            fullscreenView.classList.remove('opacity-0', 'translate-y-4');
        }
    }
</script>
}
