@page
@model SwiftStock.Pages.CashierPageModel
@{
    ViewData["Title"] = "Cashier POS";
    Layout = "_CashierLayout"; // Use the new layout
}

<div class="space-y-6">
    <div class="flex items-center justify-between">
        <h1 class="text-3xl font-bold text-white">Cashier Interface</h1>

    </div>
</div>
<div class="flex flex-col min-h-screen bg-gray-100">
    <!-- Sidebar Navigation -->
    <div class="flex flex-row flex-grow">
        <nav class="bg-white w-64 shadow-lg rounded-lg p-4 flex-shrink-0">
            <h2 class="text-lg font-semibold mb-4">Cashier Dashboard</h2>
            <ul class="space-y-2">
                <li>
                    <button onclick="showSection('pos')" class="flex items-center w-full p-2 text-left rounded-lg hover:bg-gray-200">
                        <i class="fas fa-cash-register mr-2"></i> POS
                    </button>
                </li>
                <li>
                    <button onclick="showSection('inventory')" class="flex items-center w-full p-2 text-left rounded-lg hover:bg-gray-200">
                        <i class="fas fa-box mr-2"></i> Inventory
                    </button>
                </li>
                <li>
                    <button onclick="showSection('history')" class="flex items-center w-full p-2 text-left rounded-lg hover:bg-gray-200">
                        <i class="fas fa-history mr-2"></i> Transaction History
                    </button>
                </li>
                <li>
                    <button onclick="window.location.href='/Login';" class="flex items-center w-full p-2 text-left rounded-lg hover:bg-gray-200">
                        <i class="fas fa-sign-out-alt mr-2"></i> Logout
                    </button>
                </li>
            </ul>
        </nav>

        <div class="flex-1 flex flex-col overflow-y-auto">
            <div class="p-6">
                <div id="pos" class="section">
                    <h2 class="text-xl font-semibold mb-4">Point of Sale</h2>
                    <div class="pos-grid">
                        <div class="bg-white rounded-lg shadow-md">
                            <div class="p-4 border-b border-gray-200">
                                <div class="flex gap-4">
                                    <div class="flex-1">
                                        <div class="relative">
                                            <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                                            <input type="text"
                                                   id="product-search"
                                                   placeholder="Search products..."
                                                   class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#E31837] focus:border-transparent text-sm text-gray-900"
                                                   onkeyup="filterProducts()">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Render Product Items -->
                            <div class="product-grid" id="products-container">
                                @foreach (var item in Model.InventoryItems)
                                {
                                    <div class="product-item hidden flex items-center justify-between bg-white rounded-lg shadow-md p-4 mb-2"
                                         data-name="@item.Product_Name.ToLower()">
                                        <div class="flex items-center gap-4">
                                            <span class="text-gray-900 font-medium text-sm">@item.Product_Name</span>
                                            <span class="text-gray-900 font-medium text-sm">₱@item.Price</span>
                                        </div>
                                        <button onclick="addToCart(@item.Id, '@item.Product_Name', @item.Price)"
                                                class="p-2 bg-[#E31837] text-white rounded-full hover:bg-[#E31837]/90 flex items-center justify-center"
                                                style="width: 36px; height: 36px;">
                                            <i class="fas fa-shopping-cart"></i>
                                        </button>
                                    </div>
                                }

                                <div class="no-products hidden text-sm text-gray-500">No products found.</div>
                            </div>

                            <div class="cart-section">
                                <h2 class="text-lg font-semibold mb-4 text-gray-900">Current Cart</h2>
                                <div class="cart-container overflow-y-auto max-h-64 border border-gray-200 rounded-lg">
                                    <table class="w-full text-left border-collapse">
                                        <thead>
                                            <tr>
                                                <th class="border-b py-2 text-sm">Product</th>
                                                <th class="border-b py-2 text-center text-sm">Item</th>
                                                <th class="border-b py-2 text-right text-sm">Price</th>
                                            </tr>
                                        </thead>
                                        <tbody id="cart-items">
                                            <!-- Cart items will be dynamically added here -->
                                        </tbody>
                                    </table>
                                </div>
                                <div class="cart-total mt-4">
                                    <div class="flex justify-between mb-2">
                                        <span class="text-gray-900 text-sm">Subtotal:</span>
                                        <span class="text-gray-900 text-sm" id="subtotal">₱0.00</span>
                                    </div>
                                    <div class="flex justify-between mb-2">
                                        <span class="text-gray-900 text-sm">Tax (12%):</span>
                                        <span class="text-gray-900 text-sm" id="tax">₱0.00</span>
                                    </div>
                                    <div class="flex justify-between text-lg font-bold mb-4">
                                        <span class="text-gray-900">Total:</span>
                                        <span class="text-gray-900" id="total">₱0.00</span>
                                    </div>
                                    <div class="flex justify-between items-center mb-2">
                                        <label for="cash-payment" class="text-gray-900 text-sm">Cash Payment:</label>
                                        <input type="number" 
                                               id="cash-payment" 
                                               class="w-32 h-8 p-1 border border-gray-300 rounded-lg text-sm text-gray-900" 
                                               placeholder="₱0.00" 
                                               oninput="updateChange()"
                                               min="0"
                                               step="0.01">
                                    </div>
                                    <div class="flex justify-between text-lg font-bold mb-4">
                                        <span class="text-gray-900">Change:</span>
                                        <span class="text-gray-900" id="change">₱0.00</span>
                                    </div>
                                    <div class="flex justify-between mt-4 gap-4">
                                        <button onclick="clearCart()" class="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 text-sm">Clear Cart</button>
                                        <button onclick="proceedPayment()" class="w-full px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 text-sm">Proceed Payment</button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



                <!-- Receipt Modal -->
                <div id="receipt-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
                    <div class="bg-white w-96 rounded-lg shadow-lg p-6">
                        <div class="text-center">
                            <img src="~/css/Images/SwiftLogo.png" alt="Logo" class="mx-auto w-28 h-28 mb-0">
                            <p class="text-sm font-medium">Alfamart</p>
                            <p class="text-sm text-gray-500" id="receipt-date"></p>
                        </div>
                        <hr class="my-4">
                        <div id="receipt-items" class="text-sm text-gray-800">
                            <!-- Receipt items will be dynamically added here -->
                        </div>
                        <hr class="my-4">
                        <div class="text-sm">
                            <div class="flex justify-between">
                                <span>Subtotal:</span>
                                <span id="receipt-subtotal">₱0.00</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Tax (12%):</span>
                                <span id="receipt-tax">₱0.00</span>
                            </div>
                            <div class="flex justify-between font-bold">
                                <span>Total:</span>
                                <span id="receipt-total">₱0.00</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Payment:</span>
                                <span id="receipt-payment">₱0.00</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Change:</span>
                                <span id="receipt-change">₱0.00</span>
                            </div>
                        </div>
                        <button onclick="closeReceiptModal()" class="mt-4 w-full bg-red-500 text-white py-2 rounded-lg hover:bg-red-600">Close</button>
                    </div>
                </div>

                <style>
                    /* Glassmorphism effect */
                    body {
                        background: rgba(255, 255, 255, 0.1);
                        backdrop-filter: blur(10px);
                    }

                    .bg-white {
                        background: rgba(255, 255, 255, 0.8);
                        backdrop-filter: blur(10px);
                        border-radius: 10px;
                        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                    }

                    .cart-container {
                        max-height: 256px;
                        overflow-y: auto;
                    }

                    .inventory-table {
                        width: 100%;
                        border-collapse: collapse;
                    }

                        .inventory-table th, .inventory-table td {
                            padding: 8px;
                            text-align: left;
                            border-bottom: 1px solid #e2e8f0;
                        }

                        .inventory-table th {
                            background-color: rgba(255, 255, 255, 0.9);
                        }

                        .inventory-table tr:hover {
                            background-color: rgba(229, 231, 235, 0.5);
                        }

                    .no-products {
                        padding: 12px;
                        text-align: center;
                        color: gray;
                    }

                    table {
                        table-layout: fixed;
                        width: 100%;
                    }

                        table th:nth-child(2), table td:nth-child(2) {
                            width: 120px;
                            text-align: center;
                        }

                    #receipt-modal {
                        z-index: 50;
                    }
                </style>


                <script>
                    const cart = [];

                    function filterProducts() {
                        const searchInput = document.getElementById("product-search").value.toLowerCase();
                        const productItems = document.querySelectorAll(".product-item");
                        const noProductsMessage = document.querySelector(".no-products");

                        let hasMatch = false;

                        productItems.forEach(item => {
                            const productName = item.getAttribute("data-name");

                            // If the search bar is empty, hide all products and the "No products found" message
                            if (!searchInput) {
                                item.style.display = "none";
                            } else if (productName.includes(searchInput)) {
                                item.style.display = "flex";
                                hasMatch = true;
                            } else {
                                item.style.display = "none";
                            }
                        });

                        // Hide the "No products found" message if the search bar is empty
                        if (!searchInput) {
                            noProductsMessage.classList.add("hidden");
                        } else {
                            noProductsMessage.classList.toggle("hidden", hasMatch);
                        }
                    }




                                       function addToCart(productId, productName, productPrice) {
                                        // Add the product to the cart
                                        const existingProduct = cart.find(item => item.Id === productId);
                                        if (existingProduct) {
                                            existingProduct.Quantity += 1;
                                        } else {
                                            cart.push({ Id: productId, Name: productName, Price: productPrice, Quantity: 1 });
                                        }
                                        updateCartUI();

                                        // Clear the search bar
                                        const searchInput = document.getElementById('product-search');
                                        if (searchInput) {
                                            searchInput.value = '';
                                        }

                                        // Hide the specific product that was added to the cart
                                        const productItems = document.querySelectorAll('.product-item');
                                        productItems.forEach(item => {
                                            const button = item.querySelector('button');
                                            if (button) {
                                                const itemId = button.getAttribute('onclick').match(/\((\d+),/)[1]; // Extract productId
                                                if (itemId === productId.toString()) {
                                                    item.style.display = 'none'; // Hide the product that was added to the cart
                                                }
                                            }
                                        });

                                        // Hide the "No products found" message if applicable
                                        const noProductsMessage = document.querySelector('.no-products');
                                        if (noProductsMessage) {
                                            noProductsMessage.classList.add('hidden');
                                        }
                                    }


                    function updateCartUI() {
                        const cartItemsContainer = document.getElementById('cart-items');
                        const subtotalElement = document.getElementById('subtotal');
                        const taxElement = document.getElementById('tax');
                        const totalElement = document.getElementById('total');

                        if (!cartItemsContainer || !subtotalElement || !taxElement || !totalElement) {
                            console.error('One or more required elements are missing in the DOM.');
                            return;
                        }

                        cartItemsContainer.innerHTML = '';
                        let subtotal = 0;

                        cart.forEach(item => {
                            const itemTotal = item.Price * item.Quantity;
                            subtotal += itemTotal;

                            const cartRow = document.createElement('tr');
                            cartRow.innerHTML = `
                                <td class="py-2 border-b">
                                    <button onclick="removeFromCart(${item.Id})" class="text-red-500 font-bold">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    <span class="ml-2">${item.Name}</span>
                                </td>
                                <td class="py-2 border-b text-center">
                                    <button onclick="decrementQuantity(${item.Id})" class="px-2 text-red-500 font-bold">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <span class="mx-2">${item.Quantity}</span>
                                    <button onclick="incrementQuantity(${item.Id})" class="px-2 text-green-500 font-bold">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </td>
                                <td class="py-2 border-b text-right">₱${itemTotal.toFixed(2)}</td>
                            `;
                            cartItemsContainer.appendChild(cartRow);
                        });

                        const tax = subtotal * 0.12;
                        const total = subtotal + tax;

                        subtotalElement.textContent = `₱${subtotal.toFixed(2)}`;
                        taxElement.textContent = `₱${tax.toFixed(2)}`;
                        totalElement.textContent = `₱${total.toFixed(2)}`;
                    }


                                     function clearCart() {
                                         cart.length = 0; // Clear the cart array
                                         updateCartUI();  // Update the UI to reflect the cleared cart
                                     }

                    function incrementQuantity(productId) {
                        console.log("Incrementing product:", productId);
                        const product = cart.find(item => item.Id === productId);
                        if (product) {
                            product.Quantity += 1;
                            console.log("Updated product:", product);
                            updateCartUI();
                        }
                    }

                    function decrementQuantity(productId) {
                        console.log("Decrementing product:", productId);
                        const product = cart.find(item => item.Id === productId);
                        if (product) {
                            if (product.Quantity > 1) {
                                product.Quantity -= 1;
                            } else {
                                removeFromCart(productId);
                            }
                            console.log("Updated product:", product);
                            updateCartUI();
                        }
                    }

                    function removeFromCart(productId) {
                        console.log("Removing product:", productId);
                        const productIndex = cart.findIndex(item => item.Id === productId);
                        if (productIndex !== -1) {
                            cart.splice(productIndex, 1);
                            console.log("Cart after removal:", cart);
                            updateCartUI();
                        }
                    }



                                                        function updateChange() {
                        const cashPayment = parseFloat(document.getElementById("cash-payment").value) || 0;
                        const total = parseFloat(document.getElementById("total").textContent.replace("₱", "")) || 0;
                        const change = cashPayment - total;
                        
                        // Update the change display
                        document.getElementById("change").textContent = `₱${change >= 0 ? change.toFixed(2) : "0.00"}`;
                    }

                    function proceedPayment() {
                        const cashPayment = parseFloat(document.getElementById("cash-payment").value);
                        const total = parseFloat(document.getElementById("total").textContent.replace("₱", ""));

                        if (isNaN(cashPayment) || cashPayment <= 0) {
                            alert("Please enter a valid cash payment.");
                            return;
                        }

                        if (cashPayment < total) {
                            alert("Insufficient payment. Please enter an amount greater than or equal to the total.");
                            return;
                        }

                        const change = cashPayment - total;

                        // Get the current user's name - with error handling
                        let userName = "Cashier"; // Default name if we can't get the actual name
                        const nameElement = document.querySelector('.text-slate-400');
                        if (nameElement && nameElement.textContent) {
                            userName = nameElement.textContent.replace('Welcome, ', '').trim();
                        }

                        // Log cart contents for debugging
                        console.log('Current cart contents:', cart);

                        // Prepare transaction data
                        const transactionData = {
                            Name: userName,
                            Products: cart.map(item => `${item.Name} (${item.Quantity})`).join(', '),
                            Quantity: cart.reduce((total, item) => total + item.Quantity, 0),
                            Total: total,
                            Transaction_Date: new Date().toISOString()
                        };

                        // Log the exact data being sent
                        console.log('Transaction data being sent:', JSON.stringify(transactionData, null, 2));

                        // Save transaction to database
                        fetch('/api/Transaction/SaveTransaction', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(transactionData)
                        })
                        .then(async response => {
                            console.log('Response status:', response.status);
                            const responseText = await response.text();
                            console.log('Raw response:', responseText);
                            return responseText ? JSON.parse(responseText) : {};
                        })
                        .then(data => {
                            console.log('Parsed response data:', data);
                            if (data.success) {
                                console.log('Transaction saved successfully with ID:', data.id);
                                
                                // Update the receipt modal
                                document.getElementById("receipt-date").textContent = new Date().toLocaleString();
                                document.getElementById("receipt-subtotal").textContent = document.getElementById("subtotal").textContent;
                                document.getElementById("receipt-tax").textContent = document.getElementById("tax").textContent;
                                document.getElementById("receipt-total").textContent = document.getElementById("total").textContent;
                                document.getElementById("receipt-payment").textContent = `₱${cashPayment.toFixed(2)}`;
                                document.getElementById("receipt-change").textContent = `₱${change.toFixed(2)}`;

                                // Populate receipt items
                                const receiptItemsContainer = document.getElementById("receipt-items");
                                receiptItemsContainer.innerHTML = ""; // Clear previous items
                                cart.forEach(item => {
                                    const itemRow = document.createElement("div");
                                    itemRow.className = "flex justify-between mb-2";
                                    itemRow.innerHTML = `
                                        <span>${item.Name} (x${item.Quantity})</span>
                                        <span>₱${(item.Price * item.Quantity).toFixed(2)}</span>
                                    `;
                                    receiptItemsContainer.appendChild(itemRow);
                                });

                                // Show the receipt modal
                                document.getElementById("receipt-modal").classList.remove("hidden");
                                
                                // Clear the cart after successful save
                                clearCart();
                            } else {
                                console.error('Error saving transaction:', data.error);
                                alert('Error saving transaction: ' + (data.error || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error details:', error);
                            alert('Error saving transaction. Please check the console for details.');
                        });
                    }

                                                          function closeReceiptModal() {
                                        // Hide the receipt modal
                                        document.getElementById("receipt-modal").classList.add("hidden");

                                        // Clear the cart
                                        clearCart();

                                        // Clear the cash payment input field
                                        const cashPaymentInput = document.getElementById("cash-payment");
                                        if (cashPaymentInput) {
                                            cashPaymentInput.value = ""; // Reset the input field
                                        }
                                    }


                </script>
